package eu.erasmus.intelligentSystems.search.routeFinder;

import java.util.Random;

import eu.erasmus.intelligentSystems.search.MazeBot.*;
import robocode.control.*;

public class RouteFinder {
	public static void main(String[] args) {	
		
		// Create the RobocodeEngine
		RobocodeEngine engine = new RobocodeEngine(new java.io.File("/Users/denisdrobny/robocode")); // TODO this should be changed depending on user starting the program
		// Run from /Users/denisdrobny/robocode
		// Show the Robocode battle view
		engine.setVisible(true);
		// Create the battlefield
		int generateObstaclesSeed = 1;
		int fieldSize = 10;
		int NumPixelRows = 64*10; 
		int NumPixelCols = 64*10;
		int NumObstacles = fieldSize*fieldSize * 3 / 10; // TODO

		BattlefieldSpecification battlefield = new BattlefieldSpecification(NumPixelRows, NumPixelCols);
		// 800x600
		// Setup battle parameters
		int numberOfRounds = 5;
		long inactivityTime = 10000000;
		double gunCoolingRate = 1.0;
		int sentryBorderSize = 50;
		boolean hideEnemyNames = false;
		/*
		 * Create obstacles and place them at random so that no pair of obstacles are at
		 * the same position
		 */
		RobotSpecification[] modelRobots = engine.getLocalRepository("sample.SittingDuck,eu.erasmus.intelligentSystems.search.MazeBot.MazeBot*");
		RobotSpecification[] existingRobots = new RobotSpecification[NumObstacles + 1];
		RobotSetup[] robotSetups = new RobotSetup[NumObstacles + 1];
		
		boolean[] occupiedField = generateObstacleMap(fieldSize,generateObstaclesSeed,NumObstacles);
		addRobotsToMap(occupiedField,modelRobots,existingRobots,robotSetups);
		/*
		 * Create the agent and place it in a random position without obstacle
		 */
		existingRobots[NumObstacles] = modelRobots[0]; // TODO load MazeBoat instead
		double InitialAgentRow = 412;
		double InitialAgentCol = 32;
		robotSetups[NumObstacles] = new RobotSetup(InitialAgentRow, InitialAgentCol, 0.0);
		/* Create and run the battle */
		BattleSpecification battleSpec = new BattleSpecification(battlefield, numberOfRounds, inactivityTime,
				gunCoolingRate, sentryBorderSize, hideEnemyNames, existingRobots, robotSetups);
		// Run our specified battle and let it run till it is over
		engine.runBattle(battleSpec, true); // waits till the battle finishes
		// Cleanup our RobocodeEngine
		//engine.close();
		// Make sure that the Java VM is shut down properly
		//System.exit(0);
	}
	
	private static boolean[] generateObstacleMap(int fieldSize,int seed, int numObstacles){
		Random generator = new Random(seed);
		boolean [] occupiedField = new boolean[fieldSize*fieldSize];
		for (int NdxObstacle = 0; NdxObstacle < numObstacles; NdxObstacle++) {
			int InitialObstacleRow = generator.nextInt(fieldSize);
			int InitialObstacleCol = generator.nextInt(fieldSize);
			while (occupiedField[InitialObstacleRow*InitialObstacleCol]) {
				InitialObstacleRow = generator.nextInt(fieldSize);
				InitialObstacleCol = generator.nextInt(fieldSize);
			}
			occupiedField[InitialObstacleRow*InitialObstacleCol] = true;
		}
		return occupiedField;
	}
	
	private static void addRobotsToMap(boolean[] occupiedField,RobotSpecification[] modelRobots,RobotSpecification[] existingRobots,RobotSetup[] robotSetups) {
		int fieldSize = occupiedField.length / 2;
		int numOfAdded = 0;
		for	(int i = 0; i < fieldSize; i++) {
			for	(int j = 0; j < fieldSize; j++) {
				if (occupiedField[i*j]) {
					existingRobots[numOfAdded] = modelRobots[0];
					robotSetups[numOfAdded] = new RobotSetup((double)i* 64+32, (double)j*64+32, 0.0);
					numOfAdded++;
				}
			}
		}
	}
}
